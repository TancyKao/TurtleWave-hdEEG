name: Build and Publish Python Package

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]
  workflow_dispatch:  # Allows manual triggering

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10']

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install build twine
        pip install -e .
    
    - name: Test import
      run: |
        python -c "import turtlewave_hdEEG; print(turtlewave_hdEEG.__version__)"

  build_and_publish:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Verify version format
      run: |
        # Extract version from __init__.py
        VERSION=$(grep -o "__version__ = '[^']*'" turtlewave_hdEEG/__init__.py | cut -d"'" -f2)
        echo "Package version: $VERSION"
        # Validate version format (X.Y.Z)
        if ! [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+([a-z0-9.]+)?$ ]]; then
          echo "Invalid version format: $VERSION"
          exit 1
        fi
        echo "VERSION=$VERSION" >> $GITHUB_ENV
    
    - name: Build package
      run: python -m build
    
    - name: Check distribution
      run: twine check dist/*
    
    - name: Upload to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        skip-existing: true
    
    - name: Test installation from Test PyPI
      if: success()
      run: |
        python -m pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ turtlewave-hdEEG==${{ env.VERSION }} || echo "Installation from TestPyPI failed, this is normal if version already exists"
    
    - name: Upload to PyPI
      if: github.event_name == 'release'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}